#include "chess.h"
#include "utils.h"
#include "Eval.h"

/* THIS is the way its mapped */
int Ox88to64[MAXBOARDARRAY0x88] = {
	0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0,
	8, 9, 10, 11, 12, 13, 14, 15, 0, 0, 0, 0, 0, 0, 0, 0,
	16, 17, 18, 19, 20, 21, 22, 23, 0, 0, 0, 0, 0, 0, 0, 0,
	24, 25, 26, 27, 28, 29, 30, 31, 0, 0, 0, 0, 0, 0, 0, 0,
	32, 33, 34, 35, 36, 37, 38, 39, 0, 0, 0, 0, 0, 0, 0, 0,
	40, 41, 42, 43, 44, 45, 46, 47, 0, 0, 0, 0, 0, 0, 0, 0,
	48, 49, 50, 51, 52, 53, 54, 55, 0, 0, 0, 0, 0, 0, 0, 0,
	56, 57, 58, 59, 60, 61, 62, 63, 0, 0, 0, 0, 0, 0, 0, 0 };

/* THIS is the way its mapped */
int Board64toOx88[64] = {
	0, 1, 2, 3, 4, 5, 6, 7,
	16, 17, 18, 19, 20, 21, 22, 23,
	32, 33, 34, 35, 36, 37, 38, 39,
	48, 49, 50, 51, 52, 53, 54, 55,
	64, 65, 66, 67, 68, 69, 70, 71,
	80, 81, 82, 83, 84, 85, 86, 87,
	96, 97, 98, 99, 100, 101, 102, 103,
	112, 113, 114, 115, 116, 117, 118, 119 };

string notation[MAXBOARDARRAY0x88] = {
	"a8", "b8", "c8", "d8", "e8", "f8", "g8", "h8", "X", "X", "X", "X", "X", "X", "X", "X",
	"a7", "b7", "c7", "d7", "e7", "f7", "g7", "h7", "X", "X", "X", "X", "X", "X", "X", "X",
	"a6", "b6", "c6", "d6", "e6", "f6", "g6", "h6", "X", "X", "X", "X", "X", "X", "X", "X",
	"a5", "b5", "c5", "d5", "e5", "f5", "g5", "h5", "X", "X", "X", "X", "X", "X", "X", "X",
	"a4", "b4", "c4", "d4", "e4", "f4", "g4", "h4", "X", "X", "X", "X", "X", "X", "X", "X",
	"a3", "b3", "c3", "d3", "e3", "f3", "g3", "h3", "X", "X", "X", "X", "X", "X", "X", "X",
	"a2", "b2", "c2", "d2", "e2", "f2", "g2", "h2", "X", "X", "X", "X", "X", "X", "X", "X",
	"a1", "b1", "c1", "d1", "e1", "f1", "g1", "h1", "X", "X", "X", "X", "X", "X", "X", "X"
};
int PSQT_WtoB[MAXBOARDARRAY0x88] = {
	A1, B1, C1, D1, E1, F1, G1, H1, 0, 0, 0, 0, 0, 0, 0, 0,
	A2, B2, C2, D2, E2, F2, G2, H2, 0, 0, 0, 0, 0, 0, 0, 0,
	A3, B3, C3, D3, E3, F3, G3, H3, 0, 0, 0, 0, 0, 0, 0, 0,
	A4, B4, C4, D4, E4, F4, G4, H4, 0, 0, 0, 0, 0, 0, 0, 0,
	A5, B5, C5, D5, E5, F5, G5, H5, 0, 0, 0, 0, 0, 0, 0, 0,
	A6, B6, C6, D6, E6, F6, G6, H6, 0, 0, 0, 0, 0, 0, 0, 0,
	A7, B7, C7, D7, E7, F7, G7, H7, 0, 0, 0, 0, 0, 0, 0, 0,
	A8, B8, C8, D8, E8, F8, G8, H8, 0, 0, 0, 0, 0, 0, 0, 0
};

/*
7 = 0111
3 = 0011
11= 1011

13= 1101
12= 1100
14= 1110
enum { WHITESHORT = 1, WHITELONG = 2, BLACKSHORT = 4, BLACKLONG = 8};
*/
int castling[MAXBOARDARRAY0x88] = {
	7 , 15, 15, 15, 3, 15, 15, 11, 15, 15, 15, 15, 15, 15, 15, 15,
	15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
	15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
	15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
	15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
	15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
	15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
	13, 15, 15, 15, 12, 15, 15, 14, 15, 15, 15, 15, 15, 15, 15, 15
};

int movement[64][8][8];
int  kingvectors[8] = { NORTH, NORTHEAST, EAST, SOUTHEAST, SOUTH, SOUTHWEST, WEST, NORTHWEST };
int  knightvectors[8] = {
	NORTH + NORTHWEST, NORTH + NORTHEAST, EAST + NORTHEAST, EAST + SOUTHEAST,
	SOUTH + SOUTHEAST, SOUTH + SOUTHWEST, WEST + SOUTHWEST, WEST + NORTHWEST };
int  bishopvectors[8] = { NORTHEAST, SOUTHEAST, SOUTHWEST, NORTHWEST, 0, 0, 0, 0 };
int  rookvectors[8] = { NORTH, SOUTH, EAST, WEST, 0, 0, 0, 0 };

int  queenvectors[8] = { NORTH, NORTHEAST, EAST, SOUTHEAST, SOUTH, SOUTHWEST, WEST, NORTHWEST };

//                                {NOTUSED, BLACK, WHITE}
int pawndirection[MAXCOLOR] = { EMPTY, NORTH, SOUTH };
int secondrank[MAXCOLOR] = { EMPTY, RANK7, RANK2 };
int pawn_promotion_rank[MAXCOLOR] = { EMPTY, RANK2, RANK7};
int ep_rank[MAXCOLOR] = { EMPTY, RANK4, RANK5 };
/* Functions */



Location MakeSquareFromString(string s)						{
	for (int i = 0; i < 128; i++)
		if (isSquare(i) && notation[i] == s)
			return i;
	ASSERT("INVALID SQUARE");
	return -1;
};

int CountBits(U64 b) {
	int r;
	for (r = 0; b; r++, b &= b - 1);
	return r;
}
int PieceValue(U64 b) {
	if (b & PAWN) return PAWN_WEIGHT;
	if (b & KNIGHT) return KNIGHT_WEIGHT;
	if (b & BISHOP) return BISHOP_WEIGHT;
	if (b & ROOK) return ROOK_WEIGHT;
	if (b & QUEEN) return QUEEN_WEIGHT;
	if (b & KING) return 2000;
	return 0;
}


/*************************************************************************
//http://chessprogramming.wikispaces.com/Simplified+evaluation+function
************************************************************************/
// pawn
int PSQT_P[MAXBOARDARRAY0x88] = {

	00, 00, 00, 00, 00, 00, 00, 00, 0, 0, 0, 0, 0, 0, 0, 0,
	20, 85, 85, 85, 85, 85, 85, 20, 0, 0, 0, 0, 0, 0, 0, 0,
	10, 20, 50, 50, 50, 50, 20, 10, 0, 0, 0, 0, 0, 0, 0, 0,
	05, 05, 10, 15, 15, 10, 05, 05, 0, 0, 0, 0, 0, 0, 0, 0,
	00, 00, 00, 10, 10, 00, 00, 00, 0, 0, 0, 0, 0, 0, 0, 0,
	05, -5, -10, 0, 0, -10, -5, 05, 0, 0, 0, 0, 0, 0, 0, 0,
	05, 10, 10,-20,-20, 10, 10, 05, 0, 0, 0, 0, 0, 0, 0, 0,
	00, 00, 00, 00, 00, 00, 00, 00, 0, 0, 0, 0, 0, 0, 0, 0};

// knight
int PSQT_N[MAXBOARDARRAY0x88] = {
	-50, -40, -30, -30, -30, -30, -40, -50, 0, 0, 0, 0, 0, 0, 0, 0,
	-40, -20, 0, 0, 0, 0, -20, -40, 0, 0, 0, 0, 0, 0, 0, 0,
	-30, 0, 10, 15, 15, 10, 0, -30, 0, 0, 0, 0, 0, 0, 0, 0,
	-30, 5, 15, 20, 20, 15, 5, -30, 0, 0, 0, 0, 0, 0, 0, 0,
	-30, 0, 15, 20, 20, 15, 0, -30, 0, 0, 0, 0, 0, 0, 0, 0,
	-30, 5, 10, 15, 15, 10, 5, -30, 0, 0, 0, 0, 0, 0, 0, 0,
	-40, -20, 0, 5, 5, 0, -20, -40, 0, 0, 0, 0, 0, 0, 0, 0,
	-50, -40, -30, -30, -30, -30, -40, -50, 0, 0, 0, 0, 0, 0, 0, 0 };


// bishop
int PSQT_B[MAXBOARDARRAY0x88] = {
	-20, -10, -10, -10, -10, -10, -10, -20, 0, 0, 0, 0, 0, 0, 0, 0,
	-10, 0, 0, 0, 0, 0, 0, -10, 0, 0, 0, 0, 0, 0, 0, 0,
	-10, 0, 5, 10, 10, 5, 0, -10, 0, 0, 0, 0, 0, 0, 0, 0,
	-10, 5, 5, 10, 10, 5, 5, -10, 0, 0, 0, 0, 0, 0, 0, 0,
	-10, 0, 30, 10, 10, 30, 0, -10, 0, 0, 0, 0, 0, 0, 0, 0,
	-10, 20, 30, 10, 10, 30, 20, -10, 0, 0, 0, 0, 0, 0, 0, 0,
	-10, 5, 0, 0, 0, 0, 5, -10, 0, 0, 0, 0, 0, 0, 0, 0,
	-20, -10, -30, -10, -10, -30, -10, -20, 0, 0, 0, 0, 0, 0, 0, 0};


//rook
int PSQT_R[MAXBOARDARRAY0x88] = {
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	5, 50, 50, 50, 50, 50, 50, 5, 0, 0, 0, 0, 0, 0, 0, 0,
	-5, 0, 0, 0, 0, 0, 0, -5, 0, 0, 0, 0, 0, 0, 0, 0,
	-5, 0, 0, 0, 0, 0, 0, -5, 0, 0, 0, 0, 0, 0, 0, 0,
	-5, 0, 0, 0, 0, 0, 0, -5, 0, 0, 0, 0, 0, 0, 0, 0,
	-5, 0, 0, 0, 0, 0, 0, -5, 0, 0, 0, 0, 0, 0, 0, 0,
	-5, 0, 0, 0, 0, 0, 0, -5, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, };


//queen
int PSQT_Q[MAXBOARDARRAY0x88] = {
	-20, -10, -10, -5, -5, -10, -10, -20, 0, 0, 0, 0, 0, 0, 0, 0,
	-10, 0, 0, 0, 0, 0, 0, -10, 0, 0, 0, 0, 0, 0, 0, 0,
	-10, 0, 5, 5, 5, 5, 0, -10, 0, 0, 0, 0, 0, 0, 0, 0,
	 -5, 0, 5, 5, 5, 5, 0, -5, 0, 0, 0, 0, 0, 0, 0, 0,
	  0, 0, 5, 5, 5, 5, 0, -5, 0, 0, 0, 0, 0, 0, 0, 0,
	-10, 5, 5, 5, 5, 5, 0, -10, 0, 0, 0, 0, 0, 0, 0, 0,
	-10, 0, 5, 0, 0, 0, 0, -10, 0, 0, 0, 0, 0, 0, 0, 0,
	-20, -10, -10, -5, -5, -10, -10, -20, 0, 0, 0, 0, 0, 0, 0, 0 };


//king middle game
int PSQT_K[MAXBOARDARRAY0x88] = {
	-30, -40, -40, -50, -50, -40, -40, -30, 0, 0, 0, 0, 0, 0, 0, 0,
	-30, -40, -40, -50, -50, -40, -40, -30, 0, 0, 0, 0, 0, 0, 0, 0,
	-30, -40, -40, -50, -50, -40, -40, -30, 0, 0, 0, 0, 0, 0, 0, 0,
	-30, -40, -40, -50, -50, -40, -40, -30, 0, 0, 0, 0, 0, 0, 0, 0,
	-20, -30, -30, -40, -40, -30, -30, -20, 0, 0, 0, 0, 0, 0, 0, 0,
	-10, -20, -20, -20, -20, -20, -20, -10, 0, 0, 0, 0, 0, 0, 0, 0,
	20, 20, 0, 0, 0, 0, 20, 20, 0, 0, 0, 0, 0, 0, 0, 0,
	20, 30, 10, 0, 0, 10, 30, 20, 0, 0, 0, 0, 0, 0, 0, 0 };



